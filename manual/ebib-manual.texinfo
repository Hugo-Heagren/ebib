\input texinfo  @c -*-texinfo-*-
@c %**start of header
@setfilename ebib.info
@settitle Ebib
@c %**end of header

@dircategory Emacs
@direntry
* Ebib: (ebib). A BibTeX Database Manager for Emacs
@end direntry

@c Version variables.
@set EDITION ==VERSION==
@set UPDATED ==DATE==

@ifinfo
This is Edition @value{EDITION}, last updated @value{UPDATED}, of
@cite{ebib}.
@end ifinfo

@copying
Copyright @copyright{} 2003--2007 Joost Kremers
@end copying

@titlepage
@title Ebib
@subtitle A BibTeX Database Manager for Emacs
@author Joost Kremers
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top, Installation, (dir), (dir)
@top Ebib

Ebib is a program with which you can manage BibTeX database files
without having to edit the raw @file{.bib} files. It runs in GNU/Emacs,
version 21.1 or higher (lower versions are not supported) and XEmacs (at
least from version 21.4; lower version have not been tested, but may
work.)
  
It should be noted that Ebib is @emph{not} a minor or major mode for
editing BibTeX files. It is a program in itself, which just happens to
make use of Emacs as a working environment, in the same way that for
example Gnus is.
  
The advantage of having a BibTeX database manager inside Emacs is that X
is no longer required, as Emacs can run on the console, and also that
some integration with Emacs' TeX and LaTeX modes becomes possible.  For
example, one can insert a key from the database into the text one is
editing using tab completion. Another advantage of Ebib is that it is
completely controlled by key commands: no stressful mouse movements are
required, as with most other (usually X-based) BibTeX database
managers.@footnote{Many thanks go to Jesse Alama for converting the
original @file{.tex} version of this manual to @file{.texinfo}.}

@menu
* Installation::                How to install Ebib
* Basic Usage::                 Getting started
* Advanced Features::           Specialized use
* The Ebib Buffers::            Commands in the various buffers
* Customisation::               List of customisation options

@detailmenu
 --- The Detailed Node Listing ---

Basic Usage

* Getting Started::             
* Editing the Database::        
* Saving a Database::           
* Searching::                   
* LaTeX Integration::           
* Printing the Database::       
* Marking Entries::             
* Calling a Browser::           

Getting Started

* Opening a .bib file::         
* Starting a New .bib File::    

Editing the Database

* Adding and Deleting Entries::  
* Editing Fields Values::       
* Editing Multiline Values::    
* More on Editing Field Values::  

Advanced Features

* Preloading .bib Files::       
* Preamble Definition::         
* String Definitions::          
* Sorting the .bib File::       
* Merging and Importing::       
* Exporting Entries::           
* Timestamps::                  
* Multiple Identical Fields::   
* Virtual Databases::           
* The Multiline Edit Buffer::   

Sorting the @file{.bib} file

* Cross-references::            
* Sorting on Fields::           

Virtual Databases

* Simple Selection::            
* Complex Filters::             
* Properties of Virtual Databases::  

The Ebib Buffers

* The Index Buffer::            
* The Entry Buffer::            
* The Strings Buffer::          

Customisation

* The Customisation Buffer::    
* Modifying Key Bindings::      

The Customisation Buffer

* Default Type::                
* Preload Bib Files::           
* Additional Fields::           
* Index Window Size::           
* Insertion Strings::           
* Sort Order::                  
* Use Timestamp::               
* Timestamp Format::            
* Standard Url Field::          
* Url Regexp::                  
* Browser Command::             
* Print Preamble::              
* Print Multiline::             
* Latex Preamble::              
* Print Tempfile::              
* Allow Identical Fields::      
* Entry Types::                 

@end detailmenu
@end menu

@node Installation, Basic Usage, Top, Top
@chapter Installation

To install Ebib, so that it will be loaded automatically when Emacs is
started, simply copy the file @file{ebib.el} to somewhere in your load
path and add the following line to Emacs' init file (@file{~/.emacs} for
GNU/Emacs, @file{~/.xemacs/init.el} for XEmacs):@footnote{If you do not
know what your load path is set to, go to the @samp{*scratch*} buffer,
type @samp{load-path} on an empty line, put the cursor right after it
and type @kbd{C-j}. The value of @samp{load-path} will then appear in
the buffer.}

@example
(autoload 'ebib "ebib" "Ebib, a BibTeX database manager." t)
@end example

When Ebib is loaded, you can run it with @kbd{M-x ebib}. This command is
also used to return to Ebib when you have put the program in the
background. You can bind this command to a key sequence by putting
something like the following in Emacs' init file:

@example
(global-set-key "\C-ce" 'ebib)
@end example

You can of course choose any key combination you like. (In Emacs, key
combinations of @kbd{C-c <letter>} are reserved for the user, so that
no package may set them.)

It is recommended to byte-compile the source, Ebib runs quite a lot
faster when it is byte-compiled. You can do this either within Emacs
with @kbd{M-x byte-compile-file}, or from your shell by going into the
directory where you put @file{ebib.el} and typing:@footnote{This may
produce a warning about functions that are ``not known to be
defined''. This can be safely ignored. GNU Emacs and XEmacs have some
small differences, and the functions reported in this warning are those
used by the other version. Ebib makes sure that the correct functions
are called.}

@example
emacs -batch -f batch-byte-compile ebib.el
@end example

(Substitute @samp{emacs} with @samp{xemacs} if you use XEmacs.) This
will create a file @file{ebib.elc}, which Emacs will load instead of
@file{ebib.el}.


@node Basic Usage, Advanced Features, Installation, Top
@chapter Basic Usage

A BibTeX database is somewhat of a free-form database. A BibTeX entry
consists of a set of field-value pairs. Furthermore, each entry is known
by a unique key. The way that Ebib navigates this database is by having
two windows, one that contains a list of all the entry keys in the
database, and one that contains the fields and values of the currently
highlighted entry.

When Ebib is started, the current windows in Emacs are hidden and the
Emacs frame is divided into two windows. The top one contains a buffer
that is called the @emph{index buffer}, while the lower window contains
the @emph{entry buffer}. When a database is loaded, the index buffer
holds a list of all the keys in the database. You can navigate through
these keys with the cursor keys. In the entry buffer, the fields of the
currently highlighted entry are shown, with their values.

In this chapter, all basic functions of Ebib are described, so that you
can get on your way using it. At times, reference will be made to later
chapters, where more specific functions are described.

@menu
* Getting Started::             
* Editing the Database::        
* Saving a Database::           
* Searching::                   
* LaTeX Integration::           
* Printing the Database::       
* Marking Entries::             
* Calling a Browser::           
@end menu


@node Getting Started, Editing the Database, Basic Usage, Basic Usage
@section Getting Started

Ebib is started with the command @kbd{M-x ebib}. Entering this command
will hide all the windows in the current Emacs frame and replace them
with two windows: the top one contains the index buffer, the bottom one,
taking up the larger part of the screen, contains the entry buffer. The
index buffer is named @samp{none}, to indicate that no database has been
loaded. If you open a database, or start a new one, the index buffer
will carry its name.

You can quit Ebib by typing @kbd{q}. You will be asked for confirmation,
and you will receive a warning if you happen to have an unsaved
database. The command @kbd{z} can also be used to leave Ebib. However,
unlike @kbd{q}, which completely quits Ebib, @kbd{z} only lowers it, so
that it remains active in the background. The @file{.bib} files that you
have opened remain loaded, and you can return to them by typing @kbd{M-x
ebib} again.


@menu
* Opening a .bib file::         
* Starting a New .bib File::    
@end menu

@node Opening a .bib file, Starting a New .bib File, Getting Started, Getting Started
@subsection Opening a @file{.bib} file

Loading a @file{.bib} file into Ebib is done with the command
@kbd{o}. Ebib reads the file that you specified, and reports how many
entries it found, how many @command{@@string} definitions it found, and
whether a @command{@@preamble} was found. Note that when Ebib reads a
@file{.bib} file, it only reads entry types (e.g. @samp{book, article,
phdthesis} etc.) and fields (e.g. @samp{author, title, year} etc.)  that
it knows about. A sensible set has been predefined, so that anyone who's
using standard BibTeX entry types should have no problem loading an
existing @file{.bib} file into Ebib. If, however, you have custom entry
types, or custom fields in your @file{.bib} files, you should read the
chapter on customising Ebib to learn how to define them, so that Ebib
knows about them. @xref{Entry Types}.

Once you've opened a @file{.bib} file, the keys of all the entries in
the file are shown in alphabetical order in the index buffer in the top
Ebib window. The first entry is highlighted, meaning it is the current
entry. The fields it holds and their values are shown in the entry
buffer in the bottom Ebib window. The first field is the type
field,@footnote{Actually, in the @file{.bib} file, this is not a field
at all, but rather the type identifier appearing after the @@-sign.}
which tells you what kind of entry you're dealing with (i.e. @samp{book,
article}, etc.).

Below the type field, Ebib displays (up to) three sets of fields. The
first set are the so-called obligatory fields, the fields that BibTeX
requires to be filled. The second group are the optional fields, which
do not have to be filled but which BibTeX will normally add to the
bibliography if they do have a value. The third group are the so-called
additional fields. These fields are usually ignored by BibTeX (note that
BibTeX will normally ignore @emph{all} fields it does not know),
although there are bibliography styles that treat some of these fields
as optional rather than as additional; (i.e., the @samp{harvard} styles
do typeset the @samp{url} field, if present.)

The first two groups of fields are different for each entry type, while
the third group are common to all entry types. You can use the
additional fields, for example, to add personal comments to the works in
your database. Ebib by default defines the following additional fields:
@samp{crossref, url, annote, abstract, keywords} and
@samp{timestamp}. If these are not sufficient for you, you need to
customise Ebib and add your own fields. @xref{Additional Fields}, if you
need to find out how to do that.

To move around in the index buffer, you can use the cursor keys,
@kbd{C-p} and @kbd{C-n}, or for those more used to mutt's key bindings,
with @kbd{k} and @kbd{j}. Furthermore, @key{Space} and @key{PgDn} move a
screenful of entries down, while @kbd{b} and @key{PgUp} move in the
other direction. Lastly, @kbd{g} and @key{Home} move to the first entry,
while @kbd{G} and @key{End} move to the last one.@footnote{All
keybindings in Ebib can be customised through an init file.
@xref{Modifying Key Bindings}.}

Ebib is not restricted to opening just one @file{.bib} file at a
time. You can open more files by just typing @kbd{o} again and entering
the filename. Ebib numbers the databases: the number of each database
is shown in the mode line of the index buffer, directly before the
database name. The keys 1--9 provide a quick way of jumping from one
database to another. Note that the numbering is dynamic: if you have
three databases opened and then close the second, database 3 becomes
database 2.

With the @kbd{left} and @kbd{right} cursor keys, you can move to the
previous or next database. These keys wrap, so if you hit the @kbd{left}
cursor key while the first database is active, you move to the last
database. If you are done with a database and want to close it, type
@kbd{c}. This closes the current database. It does not leave Ebib, and
all other databases you have open will remain so.


@node Starting a New .bib File,  , Opening a .bib file, Getting Started
@subsection Starting a New @file{.bib} File

If you want to start a new @file{.bib} file from scratch, you cannot
just go and enter entries. You first have to give the database a
name. So, to start a new database, type @kbd{o} first, and give the new
file a name. Once you have done this, you can start adding entries to
the database.


@node Editing the Database, Saving a Database, Getting Started, Basic Usage
@section Editing the Database

Of course, being able to open and view @file{.bib} files is only half
the fun. One needs to be able to edit the files as well. Ebib's
essential editing facilities are discussed here.


@menu
* Adding and Deleting Entries::  
* Editing Fields Values::       
* Editing Multiline Values::    
* More on Editing Field Values::  
@end menu

@node Adding and Deleting Entries, Editing Fields Values, Editing the Database, Editing the Database
@subsection Adding and Deleting Entries

To add an entry to a database, you type @kbd{a}. When you do this, Ebib
first asks you for an entry key, as every entry must be identified by a
unique key. Just type a name for the new entry (say
@samp{jones1998}). Since the entry key must be unique, Ebib will
complain if you enter a key that already exists.

Note that if you should later decide that you want to change the key of
an entry, you can do so with the command @kbd{E}. So if you have an
entry with the key @samp{jones1998} and you want to add another entry by
Jones from 1998, you can call the new one @samp{jones1998b} and rename
the existing one to @samp{jones1998a}.

Deleting an entry is done with @kbd{d}. Be careful with this: you will
be asked for confirmation, but once you've confirmed, the entry is gone,
and it is not possible to bring it back. There is no undo in Ebib. (If
you haven't saved the database yet, it is still possible to retrieve the
deleted entry from the @file{.bib} file, and otherwise it may still be
in the backup file that Ebib creates. See @ref{Saving a Database}.)


@node Editing Fields Values, Editing Multiline Values, Adding and Deleting Entries, Editing the Database
@subsection Editing Fields Values

Editing the field values for an entry is done in the lower of the two
Ebib buffers, the so-called entry buffer. You can move focus to the
entry buffer by typing the command @kbd{e} in the index buffer.

You can move between fields with the same keys that you use to move
between entries in the index buffer: the cursor keys @kbd{up} and
@kbd{down}, @kbd{C-p} and @kbd{C-n}, or @kbd{j} and @kbd{k}. @key{Space}
and @key{PgDn} move to the next set of fields, while @key{PgUp} and
@kbd{b} move to the previous set of fields. @kbd{g} and @kbd{G}, and
@key{Home} and @key{End} also work as expected.

Editing a field value can be done with @kbd{e}. For most fields, Ebib
will simply ask you for a string value in the minibuffer. (Here,
@key{RET} confirms the edit, while @kbd{C-g} cancels it.) Although
BibTeX requires that field values be surrounded by braces
@{@},@footnote{Or double quotes "", but Ebib does not use those, even
though it can of course handle them when they are used in an existing
@file{.bib} file.} you do not need to type them. Ebib will add them for
you when it saves the @file{.bib} file.

Some fields, however, are handled in a special way. The first of these
is the @samp{type} field: if you edit this field, you must enter one of
the predefined entry types. Ebib will not allow you to enter anything
else. You can use tab-completion in this case. Similarly, if you edit
the @samp{crossref} field, Ebib requires that you fill in a key from the
database. Here, too, you can use tab-completion.

Note that if you're adding a new entry, Ebib will automatically put you
in the entry buffer after you've typed the entry key: you don't have to
type @kbd{e} to move to the entry buffer. When creating a new entry, it
is best to set the @samp{type} field first, because the @samp{type}
field determines which other fields are available for an entry.

Note also that after editing a field, Ebib (usually) puts you on the
next field. This is convenient if you're creating a new entry and need
to fill out several fields in a row.

If you're done editing the fields of the entry, type @kbd{q} to move
focus back to the index buffer. (Note: keys may have different functions
in the index buffer and the entry buffer. @kbd{q} is a typical example:
in the entry buffer, it quits editing the entry and moves focus back to
the index buffer. In the index buffer, however, @kbd{q} quits Ebib.)


@node Editing Multiline Values, More on Editing Field Values, Editing Fields Values, Editing the Database
@subsection Editing Multiline Values

Apart from the @samp{type} and @samp{crossref} field, there is another
field that Ebib handles in a special way when you edit its value. This
is the @samp{annote} field. Most field values normally consist of a
single line of text. However, because the @samp{annote} field is meant
for creating annotated bibliographies, it would not be very useful if
you could only write one line of text in this field. Therefore, when you
edit the @samp{annote} field, Ebib will put you in the so-called
@emph{multiline edit buffer}. This is essentially a text mode buffer,
that allows you to enter as much text as you like. To store the text and
leave the multiline edit buffer, type @kbd{C-x b}. (This is of course
the standard Emacs command to switch buffers. It is redefined in Ebib's
multiline edit buffer.)

If you want to leave the multiline edit buffer without saving the text
you have just saved, you can use the command @kbd{C-x k}. This too is
redefined in the multiline edit buffer: it leaves the multiline edit
buffer (and hides it), but it does not actually kill the buffer.

Multiline values are not restricted to the @samp{annote} field. Any
field can in fact hold a multiline value. (Except of course the
@samp{type} and @samp{crossref} fields.) To give a field a multiline
value, use @kbd{l} instead of @kbd{e}. You will again be put in the
multiline edit buffer, where you can edit the value. Note that you can
use @kbd{l} even if a field already has a single line value. Ebib will
just make that the first line in the multiline edit buffer.

When a field has a multiline value, only the first line is shown in the
entry buffer, for space reasons. To indicate that the value is
multiline, a plus sign @samp{+} is placed in front of the value. 

By the way, the @kbd{e} key is smart about the way an entry must be
edited. If you press @kbd{e} on a field that already has a multiline
value, regardless of the fact whether it is the @samp{annote} field or
not, Ebib puts you in the multiline edit buffer. Therefore, you need
@kbd{l} only if you want to give a field a multiline value when it
doesn't have one yet.

For more details on working with the multiline edit buffer, see @ref{The
Multiline Edit Buffer}.


@node More on Editing Field Values,  , Editing Multiline Values, Editing the Database
@subsection More on Editing Field Values

A few more commands are available when you're in the entry buffer
editing field values. The commands @kbd{c}, @kbd{x} and @kbd{y}
implement a copy and paste system: @kbd{c} copies the contents of the
current field to the kill ring, @kbd{x} kills the contents of the
current field to the kill ring, and @kbd{y} yanks (pastes) the most
recently killed text in the kill ring. You can type @kbd{y} repeatedly
to get the same effect you get in Emacs when you type @kbd{M-y} after an
initial @kbd{C-y}: every additional use of @kbd{y} moves back in the
kill ring.

Lastly, there is the command @kbd{d}, which deletes the contents of the
current field, without asking questions and without storing the text in
the kill ring.

Note that @kbd{y} only works when the current field does not have a
value yet. This is to prevent you from accidentally overwriting a field
value. If you do want to yank text into a field that already has a
value, simply hit @kbd{d} first to delete the text.


@node Saving a Database, Searching, Editing the Database, Basic Usage
@section Saving a Database

When you have undertaken any kind of editing action on a database, it is
marked as modified, which is indicated in the mode line for the index
buffer. A modified buffer can be saved by typing @kbd{s}. This saves the
database to the file it was loaded from without asking for
confirmation. (It is similar to @kbd{C-x C-s} in Emacs.) If you're
saving a file for the first time after loading it, Ebib will create a
backup file under the same name appended with a tilde:
@file{<filename>.bib~}.

If you have multiple databases open, have made changes in more than one
of them, and want to save all of them without going through each
yourself, you can use @kbd{S}. (That's a capital @kbd{S}.) This command
saves all modified databases.

Another way to save a database is to use the command @kbd{w}. Use this
if you want to write the database to another file than the one it was
loaded from. Ebib will ask you for a filename to save to, and will of
course warn you if that file happens to exist already. Note that this
command is similar to @kbd{C-x C-w} in Emacs, so that after using it,
the new @file{.bib} file becomes associated with the database.


@node Searching, LaTeX Integration, Saving a Database, Basic Usage
@section Searching

Ebib provides several search methods. First, if you are in the index
buffer, the normal Emacs incremental searches, @kbd{C-s} and @kbd{C-r},
function as expected. You can use them to search entry keys. Note that
once you've found the key you're searching, you must hit @key{ENTER} to
make it active. Ebib does not update the entry buffer during incremental
search, as this would be rather pointless: you're only interested in the
entry you're searching for, not in the entries you pass along the
way.@footnote{Another ---practical--- reason why Ebib does not do this
is that the incremental search functions are actually Emacs' own
functions. Updating the entry buffer would require implementing
Ebib-specific versions of @command{isearch-forward} and
@command{isearch-backward}.}

Of course, it is also possible to search the database itself. If you
type @kbd{/}, Ebib asks you for a search term. This can be a regural
expression, to allow for flexibility in searching. After hitting
@key{ENTER}, Ebib will start searching the database (starting from the
current entry, @emph{not} from the first entry!) and will display the
entry with the first occurrence of the search string that it finds. All
the occurrences of the search string in that entry are highlighted.

Ebib searches all the fields of each entry. It is not possible with
@kbd{/} to specify the fields to search. Note that if the search term is
found in a field with a multiline value, Ebib will highlight the
@samp{+} sign that it displays in front of the field value. Keep an eye
out for this when doing a search, because Ebib only shows the first line
of multiline values, and if the search term appears in another line, the
highlighted @samp{+} is the only indication that the search term was
found. (Well, that and the fact that Ebib does @emph{not} say
@samp{Search string not found}, of course...)

A search term may of course appear more than once in the database. To
search for the next occurrence, type @kbd{n}. This will continue
searching for the search string in the rest of the database. Again, the
first entry found to contain the search string is displayed. Note that
@kbd{n} does not wrap: if the end of the database is reached, Ebib stops
searching. To continue searching from the top, hit @kbd{g} and then
@kbd{n}.

The functions described here form Ebib's basic search
functionality. Ebib also has a much more powerful search mechanism in
the form of @emph{virtual databases}. These are described later.
@xref{Virtual Databases}.


@node LaTeX Integration, Printing the Database, Searching, Basic Usage
@section LaTeX Integration

Leaving Ebib with the command @kbd{z} has an additional advantage, apart
from the fact that you do not have to reload your database(s) when you
invoke Ebib again. When you are in a non-Ebib buffer, two commands are
available that allow you to query Ebib's database. First, there is
@command{ebib-insert-bibtex-key}. When you invoke this command, Emacs
prompts you for a key from the database associated with the current
buffer. You can type the key, using tab-completion, and after hitting
@key{RET}, Emacs puts a BibTeX citation at the cursor position in the
current buffer with the key you selected.

The citation command that Emacs inserts is @command{\cite@{<key>@}}. The
string that @command{ebib-insert-bibtex-key} inserts can be
customised. It is in fact possible to define multiple insertion strings,
so that you can have Ebib insert not only the key, but the entire
citation command. The different strings can then be obtained by calling
@command{ebib-insert-bibtex-key} with a prefix argument. So if you have
defined e.g. four insertion strings, @kbd{M-2 M-x
ebib-insert-bibtex-key} inserts the second one. If you have defined more
than one insertion string, calling @command{ebib-insert-bibtex-key}
without prefix argument will insert the first string. For details on
defining custom insertion strings, see @ref{Customisation}.

The second function that is available outside Ebib is
@command{ebib-entry-summary}. This command reads the key under the
cursor in the current buffer and displays the field values associated
with that key in a @samp{*Help*} buffer. This allows you to quickly
check a reference in a text.

Ebib can have multiple databases open, but the two commands discussed
here operate on only one of these. In order to determine which database
@command{ebib-insert-bibtex-key} and @command{ebib-entry-summary} must
consult, Ebib tries to associate a (LaTeX) buffer with a particular
BibTeX database.  Ebib does this by checking if there is a
@command{\bibliography} command in the current file. If there is, it
reads the filename from that command and tries to find a corresponding
database. If there is no database with that name, Ebib will give an
error. (This usually means that the relevant database is not loaded.)
If there is no @command{\bibliography} command in the current file, Ebib
will consult the current database, i.e., the database that was active
when Ebib was lowered.

If you have split up your LaTeX document into more than one file, you
may of course be editing a file that does not have a
@command{\bibliography} command of its own. If you use AUCTeX, Ebib will
check if the variable @samp{TeX-master} happens to be set to a
filename. If it is, Ebib will look for a @command{\bibliography} command
in that file instead of in the current buffer.  If you don't use AUCTeX,
just make sure that the relevant database is active in Ebib: if Ebib
does not find a @command{\bibliography} command in the current buffer,
and does not find @samp{TeX-master}, it will use the current database as
a default.

A final note: probably the easiest way to use both of these functions is
to bind them to a key sequence. For example, you could put the following
in your @file{~/.emacs}:

@example
(add-hook 'LaTeX-mode-hook #'(lambda ()
                  (local-set-key "\C-cb" 'ebib-insert-bibtex-key)))
@end example

This binds @kbd{C-c b} to the command @command{ebib-insert-bibtex-key}
in AUCTeX's LaTeX mode.@footnote{Commands of the form @kbd{C-c <letter>}
are reserved for the user, and should therefore not be set by any
package. For this (and other) reasons, Ebib does not set this command
automatically.}


@node Printing the Database, Marking Entries, LaTeX Integration, Basic Usage
@section Printing the Database

Sometimes it may be useful to have a @file{.pdf} file or print-out of
your database. Although Ebib does not actually do the printing itself,
it can create a LaTeX file for you that you can compile and print. In
fact, there are two ways of doing this.

The first is the command @kbd{L}. This command creates a simple LaTeX
document that essentially contains a @command{\nocite@{*@}} command
followed by a @command{\bibliography} command referring to the
@file{.bib} file belonging to the current database. You can then run the
usual sequence of LaTeX, BibTeX, LaTeX, LaTeX on this file, creating a
document containing a list of all the references in your database.

The second command for printing a database is @kbd{P}. This command also
creates a LaTeX file. However, instead of simply providing a
@command{\nocite@{*@}} command, @kbd{P} creates a @command{tabular}
environment for each entry in the database listing all the fields of
that entry and their values.

The difference between @kbd{L} and @kbd{P} should be obvious: with
@kbd{L}, you get a list of references created by BibTeX. This means that
the references look the way they will when actually used in a document,
but it also means that the list only contains the information that
BibTeX deems relevant.

With @kbd{P} you get an overview of your database with @emph{all} the
field values of each entry, including the ones that BibTeX does not
use. The entries are not formatted as literature references, but in a
way similar to how they are shown in Ebib.

By default, @kbd{P} only shows single-line field values. That is,
multiline values are normally excluded. If you want to include multiline
values in the print-out, you have to set the option @samp{Print
Multiline} in Ebib's customisation buffer. (@xref{The Customisation
Buffer}.) With this option set, Ebib will include all multiline values
in the LaTeX file that @kbd{P} creates. Note however that Ebib does not
change anything about the formatting of the text in a multiline
value. So if you plan to make (heavy) use of this option, make sure that
the way you type your text conforms to LaTeX's conventions (e.g. empty
lines to mark paragraphs, etc.) and doesn't contain any characters such
as @samp{&} that are illegal in LaTeX. (Or, alternatively, use LaTeX
code in your multiline fields.)

As mentioned, when you use either @kbd{L} or @kbd{P}, Ebib creates a
LaTeX file. More precisely, it creates a temporary buffer and writes the
LaTeX code into it, and then saves the contents of that buffer to a
file. After it has done that, Ebib will lower itself and instruct Emacs
to open the file in a buffer, which will then be properly set up as a
LaTeX buffer. From there you can run LaTeX and view the result.

Before doing all this, Ebib will ask you which file to write to. Be
careful with this: since this is supposed to be a temporary file, Ebib
will simply assume that if you provide a filename of an existing file,
it can overwrite that file without warning!

A better way to tell Ebib which file to use is to set the option
@samp{Print Tempfile} in Ebib's customisation buffer to some temporary
file. When this option is set, Ebib will always use this file to write
to, and will not ask you for a filename anymore when you type @kbd{L} or
@kbd{P}.

There are two more customisation options for printing the
database. These are @samp{Print Preamble} and @samp{LaTeX
Preamble}. With these options, you can specify what Ebib should put in
the preamble of the LaTeX files it creates. Use this if you want to use
specific packages (e.g. @samp{\usepackage@{a4@}} or
@samp{\usepackage@{times@}}). This is especially useful for @kbd{L},
since by default, Ebib uses BibTeX's standard bibliography style. With
the option @samp{LaTeX Preamble} you can set your preferred bibliography
style. Details are discussed in the chapter on customisation, see
@ref{The Customisation Buffer}.


@node Marking Entries, Calling a Browser, Printing the Database, Basic Usage
@section Marking Entries

Commands in the index buffer generally operate on one single entry, or
on all entries. For some, however, it would be useful if you could
perform them on more than one entry, but not necessarily all of
them. You can mark the entries you want to perform a command on with the
key @kbd{m}. This marks (or unmarks) the current entry. Marked entries
are displayed in inverse video.@footnote{That is, in GNU Emacs. XEmacs
doesn't have this option, so that marked entries are simply
highlighted.}

Of the commands discussed so far, three can be used on marked entries:
@kbd{d}, @kbd{L} and @kbd{P}. Note, however, that it is not enough to
mark the entries you want and then type any of these commands. If you do
so, they will behave as if no entries were marked. To get these commands
to work on the marked entries, you have to type a semicolon before
them. That is, @kbd{; d} deletes all marked entries, and @kbd{; L} and
@kbd{; P} create a LaTeX file of only the marked entries. The command
@kbd{m} itself can also be used with the @kbd{;} prefix. If there are
any marked entries, @kbd{; m} unmarks them all. Otherwise, @kbd{; m}
marks all entries.


@node Calling a Browser,  , Marking Entries, Basic Usage
@section Calling a Browser

With more and more scientific literature becoming available on-line, it
becomes common to store URLs in a BibTeX database. Sometimes you may
want to load such a URL in your browser. Ebib provides a convenient way
for doing so.

If you type @kbd{u} in the index buffer, Ebib will take the first URL
stored in the @samp{url} field of the current entry and pass it to
your browser. Furthermore, in the entry buffer, you can use @kbd{u} on
@emph{any} field. If you happen to have more than one URL stored in the
relevant field, and you want to pass the second (or third, etc.) to the
browser, you can use a prefix argument. So typing @kbd{M-2 u} sends the
second URL to your browser, @kbd{M-3 u} the third, and so on.

It is not even necessary that the relevant field contains @emph{only}
URLs. It may contain other text mixed with the URLs: Ebib simply
searches the URLs in the field and ignores the rest of the text. Ebib
considers every string of characters that starts with @samp{http://} or
@samp{https://} and does not contain whitespace or any of the characters
@command{" ' <} or @command{>} as a URL. Furthermore, Ebib regards
everything that is enclosed in a LaTeX @command{\url@{...@}} command as
a URL. This behaviour is controlled by a regular expression that can be
customised. (@xref{Url Regexp}.)

There exists an Emacs function @command{browse-url}, which provides a
nifty interface to calling an external browser. In principle, Ebib uses
this function. However, if this function is not present on your
installation,@footnote{My installation of XEmacs, for example, does not
have it.} you can set the option @samp{Browser Command} to call the
browser. @xref{Browser Command}.

As just explained, if you press @kbd{u} in the index buffer, Ebib
searches the @samp{url} field of the current entry for URLs. If you have
the habit of putting your URLs in another field, however, you may change
the customisation option @samp{Standard Url Field} and tell Ebib to use
another field for searching the URLs. @xref{Standard Url Field}. (Keep
in mind, though, that in the entry buffer, you can load a URL from any
field.)


@node Advanced Features, The Ebib Buffers, Basic Usage, Top
@chapter Advanced Features

The features discussed in the previous chapter should be sufficient to
get started using Ebib. However, Ebib has several more advanced
features, which are described in this chapter.

@menu
* Preloading .bib Files::       
* Preamble Definition::         
* String Definitions::          
* Sorting the .bib File::       
* Merging and Importing::       
* Exporting Entries::           
* Timestamps::                  
* Multiple Identical Fields::   
* Virtual Databases::           
* The Multiline Edit Buffer::   
@end menu

@node Preloading .bib Files, Preamble Definition, Advanced Features, Advanced Features
@section Preloading @file{.bib} files

Chances are that you will be doing most of your work with one or a few
@file{.bib} files, and you may find yourself opening the same file or
files every time you start Ebib. If so, you can tell Ebib to always load
specific @file{.bib} files on startup. To do this, specify the files in
Ebib's customisation buffer, under the option @samp{Preload Bib Files}.

Note, by the way, that you can switch to Ebib's customisation buffer by
typing @kbd{C} (that's a capital @kbd{C}) in Ebib's index buffer.


@node Preamble Definition, String Definitions, Preloading .bib Files, Advanced Features
@section @command{@@Preamble} Definition

Apart from database entries, BibTeX allows three more types of elements
to appear in a @file{.bib} file. These are @command{@@comment},
@command{@@preamble} and @command{@@string} definitions. Ebib provides
facilities to handle the latter two. @command{@@comment} definitions
cannot be added to a @file{.bib} file through Ebib, and if Ebib finds
one in a @file{.bib} file, it will simply ignore it.

@command{@@preamble} and @command{@@string} definitions can be handled,
however. Ebib allows you to add one @command{@@preamble} definition to
the database.  In principle, BibTeX allows more than one such
definition, but really one suffices, because you can use the
concatenation character @samp{#} to include multiple TeX or LaTeX
commands. So, rather than having two @command{@@preamble definitions}
such as:

@example
@@preamble@{ "\newcommand@{\noopsort@}[1]@{@} " @}
@@preamble@{ "\newcommand@{\singleletter@}[1]@{#1@} " @}
@end example

@noindent you can write this in your @file{.bib} file:

@example
@@preamble@{ "\newcommand@{\noopsort@}[1]@{@} "
         # "\newcommand@{\singleletter@}[1]@{#1@} " @}
@end example

Creating or editing a @command{@@preamble} definition in Ebib is done by
hitting @kbd{p} in the index buffer. Ebib uses the multiline edit buffer
for editing the text of the @command{@@preamble} definition, which means
that as discussed above, @kbd{C-x b} stores the @command{@@preamble}
text and returns focus to the index buffer, while @kbd{C-x k} returns
focus to the index buffer while abandoning any changes you may have
made. (For details on using the multiline edit buffer, see @ref{The
Multiline Edit Buffer}.)

In order to create a @command{@@preamble} as shown above in Ebib, you
only have to type the text between the braces.  Ebib will take care of
including the braces of the @command{@@preamble} command, but otherwise
it will save the text exactly as you enter it. So you'd have to type the
following in Ebib:

@example
@group
"\newcommand@{\noopsort@}[1]@{@} "
# "\newcommand@{\singleletter@}[1]@{#1@} "
@end group
@end example

Note that when Ebib loads a @file{.bib} file that contains more than one
@command{@@preamble} definition, it will concatenate all the strings in
them in the manner just described and save them in one
@command{@@preamble} definition.


@node String Definitions, Sorting the .bib File, Preamble Definition, Advanced Features
@section @command{@@String} Definitions

If you press @kbd{t} in the index buffer, Ebib hides the entry buffer in
the lower window and replaces it with the @emph{strings buffer}. In this
buffer, you can add, delete and edit @command{@@string} definitions.

Adding a @command{@@string} definition is done with the command
@kbd{a}. This will first ask you for an abbreviation and then for the
value to be associated with that abbreviation. Once you've entered
these, Ebib will sort the new abbreviation into the buffer.

Moving between the @command{@@string} definitions can be done in the
usual way: the cursor keys @command{up} and @command{down}, @kbd{C-p}
and @kbd{C-n} and @kbd{k} and @kbd{j} move up and down. @key{Space} and
@key{PgDn} move ten strings down, while @kbd{b} and @key{PgUp} move in
the other direction. The keys @kbd{g}, @kbd{G}, @key{Home} and @key{End}
also function as expected.

To delete a @command{@@string} definition, use @kbd{d}. To edit the
value of a definition, use @kbd{e}. There is also a command @kbd{c},
which copies the value of the current @command{@@string} definition to
the kill ring. Unlike in the entry buffer, there are no corresponing
commands @kbd{y} and @kbd{x}.@footnote{In fact, @kbd{x} does exist, but
has another function.} Yanking from the kill ring can be done with
@kbd{C-y/M-y} in the minibuffer when you edit a @command{@@string}'s
value. Cutting a @command{@@string}'s value is pointless, because a
@command{@@string} definition must have a value.

Having defined @command{@@string} definitions, there must of course be a
way to use them. Just giving a field a string abbreviation as value will
not do, because Ebib puts braces around the value that you enter when it
writes the @file{.bib} file, so that BibTeX will not recognise the
abbreviation, and will not expand it. BibTeX will only recognise an
abbreviation if it appears in the @file{.bib} file outside of any
braces.

To accomplish this, you must mark a field's value as @emph{raw}. A raw
field is a field whose value is not surrounded by braces when the
database is saved, so that BibTeX recognises it as an abbreviation. To
mark a field raw, press @kbd{r}. An asterisk will appear before the
field, indicating that it is raw. Pressing @kbd{r} again will change the
field back to normal. If you press @kbd{r} on a field that does not have
a value yet, Ebib will ask you for one.

Note that this also makes it possible to enter field values that are
composed of concatenations of strings and abbreviations. The BibTeX
documentation for example explains that if you have defined:

@example
@@string@{WGA = "World Gnus Almanac"@}
@end example

@noindent you can create a BibTeX field like this:

@example
title = 1966 # WGA
@end example

@noindent which will produce ``1966 World Gnus Almanac''. Or you can do:

@example
month = "1~" # jan
@end example

@noindent which will produce someting like ``1 January'', assuming your bibliography
style has defined the abbreviation @samp{jan}. All this is possible with
Ebib, simply by entering the exact text including quotes or braces
around the strings, and marking the relevant field as raw.

An easy way to enter a @command{@@string} abbreviation as a field value
is to use the key @kbd{s} instead of @kbd{e}. If you type @kbd{s}, Ebib
will ask you for a @command{@@string} abbreviation to put in the current
field, and will automatically mark the field as raw. With this command,
Ebib will only accept @command{@@string} definitions that are in the
database, so that by using @kbd{s} you can make sure you don't make any
typos. Note that you can use tab completion to complete a partial string.


@node Sorting the .bib File, Merging and Importing, String Definitions, Advanced Features
@section Sorting the @file{.bib} file

By default, the entries in the database are saved to the @file{.bib}
file in alphabetical order according to entry key. If you only deal with
the @file{.bib} file through Ebib, you may not care in which order the
entries are saved, but there are circumstances in which it becomes
relevant. Ebib provides two ways to influence the order of entries in
the database.


@menu
* Cross-references::            
* Sorting on Fields::           
@end menu

@node Cross-references, Sorting on Fields, Sorting the .bib File, Sorting the .bib File
@subsection Cross-references

One case in which it is important to have the entries appear in a
certain order in the @file{.bib} file is when you use the
@samp{crossref} field. With BibTeX, entries with a @samp{crossref} field
can inherit field values from their cross-referenced entry (though Ebib
does not show such inherited field values), and if two or more entries
cross-reference the same entry, BibTeX will automatically include the
cross-referenced entry in the bibliography (and put a reduced reference
in the cross-referencing entries).

For this to work, however, the cross-referencing entries must appear
before the cross-referenced entries in the @file{.bib} file. In order to
tell Ebib to save all entries with a @samp{crossref} field first, you
must set the option @samp{Save Xrefs First} in Ebib's customisation
buffer. With this option set, BibTeX's crossreferencing options work as
intended.

By default this option is unset.


@node Sorting on Fields,  , Cross-references, Sorting the .bib File
@subsection Sorting on Fields

It may sometimes also be desirable to be able to specify the sort order
of entries in more detail.@footnote{I have been told that the
bibliography module of ConTeXt can retain the order of entries in the
@file{.bib} file, for example.} To accomplish this, Ebib allows you to
specify a sort order for the @file{.bib} file.

The sort order is specified in Ebib's customisation buffer. To sort the
entries, you must set at least one sort level (that is, a field to sort
the entries on). You can also specify more than one sort level: if two
entries have identical values for the first sort level, they will be
sorted on the second sort level. E.g., if the first sort level is
@samp{author} and the second is @samp{year}, then the entries are sorted
by author, and those entries that have identical values for the
@samp{author} field are sorted by year.

A sort level is not restricted to a single field. You can specify more
fields for a single sort level. Within a single sort level, a second
sort field is used if the first sort field does not have a value. For
example, books that have an editor instead of an author will have an
empty @samp{author} field. If you sort the database on the @samp{author}
field, such entries will all appear at the beginning of the @file{.bib}
file, which is most likely not what you want.

To remedy this, you can specify both the @samp{author} and the
@samp{editor} fields for the first sort level. Ebib will then sort an
entry on its @samp{author} field if it has a value, and will otherwise
use the value of the @samp{editor} field.

The difference between two sort fields within one sort level and two
sort levels is that a second sort @emph{field} is an alternative for
the first field when it has no value, while a second sort @emph{level}
is an additional sort criterion when two or more entries cannot be
sorted on the first level, because they have identical values.

By default, the option @samp{Sort Order} has no value, which means
that the entries in the @file{.bib} file are sorted according to entry
key. Those that wish to customise the sort order will usually want to
set the first sort level to @samp{author editor}, and the second to
@samp{year}. In that way, the entries in the @file{.bib} file are sorted
according to author/editor, and entries with the same author/editor are
sorted by year.

Entries that cannot be sorted on some sort level, because the sort
fields are empty, are sorted on entry key.@footnote{Note that if the
first sort level yields @emph{no value} for a specific entry, Ebib
does @emph{not} use the second sort level to sort that entry. It uses
the entry key. The second sort level is only used if the first yields
@emph{identical} values for two or more entries.}

Note that if you have set the option @samp{Save Xrefs First} (see the
previous section), it is pointless to set a sort order. Saving
cross-referencing entries first messes up any sort order, so Ebib simply
ignores the sort order if @samp{Save Xrefs First} is set.


@node Merging and Importing, Exporting Entries, Sorting the .bib File, Advanced Features
@section Merging and Importing

As described in the previous chapter, adding entries to a database can
be done manually with the key @kbd{a}. There are other ways of adding
entries to a database, however.

With the command @kbd{M} you can merge a second @file{.bib} file into
your current database. When you hit @kbd{M}, you are asked for a
filename. Ebib then reads the entries in this file and adds them to the
database. Duplicate entries (that is, entries with an entry key that
already exists in the database) will not be loaded. Ebib will display a
message in the minibuffer when this happens. (If there are more
duplicate entries, you will have to switch to the @samp{*Message*}
buffer to see them all.)

Another way to add entries to a database is to import them from an Emacs
buffer. If, for example, you find ready-formatted BibTeX entries in a
text file or e.g. the internet, you can copy & paste them to any Emacs
buffer (e.g. the @samp{*scratch*} buffer), and then execute the command
@kbd{M-x ebib-import}. Ebib will then go through the buffer and load all
BibTeX entries it finds into the current database (i.e. the database
that was active when you lowered Ebib).

If you call @command{ebib-import} while the region is active, Ebib will
only read the BibTeX entries in the region. Note that Ebib will ignore
any text in the buffer or region that does not belong to a BibTeX entry,
so the buffer you use doesn't actually have to be empty.


@node Exporting Entries, Timestamps, Merging and Importing, Advanced Features
@section Exporting Entries

Sometimes it can be useful to copy entries from one database to another,
or to create a new @file{.bib} file with several entries from an
existing database. For this purpose, Ebib provides exporting
facilities. To export an entry to a @file{.bib} file, use the command
@kbd{x}. Ebib will ask you for a filename to export the entry to. (If
you have already exported an entry before, Ebib will present the
filename you used as default, but you can of course change it.)

For obvious reasons, Ebib appends the entry to the file that you enter
if it already exists, it does not overwrite the file. If this is not
what you want, delete the file first, as Ebib provides no way to do
this.

If you have more than one database open in Ebib, it is also possible to
copy entries from one database to another. To do this, use the @kbd{x}
command with a numeric prefix argument. E.g., if the database you want
to export an entry to is the second database, type @kbd{M-2 x} to export
the current entry to it. The number of the database is given in the
modeline of the index buffer.

If the database you're copying an entry to already contains an entry
with the same entry key, Ebib will not copy the entry, and issue an
appropriate warning message.

Note that the command @kbd{x} can operate on marked entries. So to
export several entries in one go mark them and type @kbd{; x}. You can
use a prefix argument in the normal way: @kbd{M-2 ; x} exports the
marked entries to database 2.

Apart from entries, it is also possible to export the
@command{@@preamble} and @command{@@string} definitions. The
@command{@@preamble} definition is exported with the command @kbd{X} in
the index buffer. @command{@@string} definitions can be exported in the
strings buffer: @kbd{x} in this buffer exports the current string, while
@kbd{X} exports all @command{@@string} definitions in one go. All these
commands function in the same way: when used without a prefix argument,
they ask for a filename, and then append the relevent data to that
file. With a numeric prefix argument, they copy the relevant data to the
corresponding open database.


@node Timestamps, Multiple Identical Fields, Exporting Entries, Advanced Features
@section Timestamps

Ebib provides the possibility to add a timestamp to every new entry,
recording the time it was added to the database. The timestamp is
recorded in the (additional) field @samp{timestamp}. (By default, this
field is not shown, but you can make it visible by pressing @kbd{H} in
the index buffer.)

You can tell Ebib to create timestamps by setting the option @samp{Use
Timestamp} in Ebib's customisation buffer. With this option set, a
timestamp will be included in entries added to the database with
@kbd{a}. Ebib will also add a timestamp to entries imported from a
buffer or merged from a file, and to entries exported to another
database or to a file. When importing or exporting entries, existing
timestamps will be overwritten. The logic behind this is that the
timestamp records the date and time when the entry was added to the
database, not when it was first created.

Note that if this option is unset, the timestamp of an entry will be
retained when it's imported or exported. Therefore, if you record
timestamps and want to im-/export entries without changing their
timestamps, temporarily unset this option.

Ebib uses the function @command{format-time-string} to create the
timestamp. The format string that Ebib uses can be customised in Ebib's
customisation buffer. The default string is @w{@command{"%a %b %e %T
%Y"}}, which produces a timestamp of the form @w{@command{"Mon Mar 12
01:03:26 2007"}}. Obviously, this string is not suited for sorting, so
if you want to be able to sort on timestamps, you will need to customise
the format string. See the documentation for
@command{format-time-string} on the options that are available.


@node Multiple Identical Fields, Virtual Databases, Timestamps, Advanced Features
@section Multiple Identical Fields

Under normal circumstances, a BibTeX entry only contains one occurrence
of each field. If BibTeX notices that an entry contains more than one
occurrence of an obligatory or optional field, it will issue a
warning. Ebib is somewhat less gracious, it simply takes the value of
the last occurrence without giving any warning.@footnote{Note, by the
way, that BibTeX will use the value of the @emph{first} occurrence, not
the last.} When additional fields appear more than once in an entry,
BibTeX does not warn you, since it ignores those fields anyway. Here,
too, Ebib's standard behaviour is to ignore all but the last value.

However, some online reference management services ``use'' this feature
of BibTeX in that they put multiple @samp{keywords} fields in the BibTeX
entries that they produce. If you were to import such an entry into
Ebib, you would lose all your keywords except the last one. To remedy
this, you can tell Ebib that it should allow multiple occurrences of a
single field in a BibTeX entry. You can do this by setting the
customisation option @samp{Allow Identical Fields}. (@xref{Allow
Identical Fields}.)

With this option set, Ebib collapses the multiple occurrences into a
single occurrence. All the values of the different occurrences are
collected and stored in the single occurrence, separated by
semicolons. That is, Ebib does not retain the multiple occurrences, but
it can retain the values.@footnote{Given the way Ebib is designed, it
would not be easy to add the ability to store multiple fields of the
same type in an entry. And since this is not really a common situation
for BibTeX entries, it is unlikely that this functionality will ever be
added.} So suppose you have an entry that contains the following
@samp{keywords} fields:

@example
@@book@{jones1998,
    author = @{Jones, Joan@},
    year = @{1998@},
    @dots{}
    keywords = @{sleep@},
    keywords = @{winter@},
    keywords = @{hybernation@}
@}
@end example

If you load this entry into Ebib with the option @samp{Allow Identical
Fields} set, you will get the following:

@example
@@book@{jones1998,
    author = @{Jones, Joan@},
    year = @{1998@},
    @dots{}
    keywords = @{sleep; winter; hybernation@}
@}
@end example


@node Virtual Databases, The Multiline Edit Buffer, Multiple Identical Fields, Advanced Features
@section Virtual Databases

In the previous chapter, Ebib's basic search functionality was
discussed. (@xref{Searching}.) Ebib also provides a much more
sophisticated search and filtering mechanism in the form of
@emph{virtual databases}.

A virtual database is a database that is not associated with any
@file{.bib} file. Rather, it is created from another database by
selecting entries from it based on a specific search pattern, called a
@emph{filter}. This allows you, for example, to select all entries from
a database that contain the string ``Jones'' in their @samp{author}
field. A filter can be as complex as you want: you can select all
entries that do @emph{not} contain ``Jones'' in the @samp{author} field,
or all entries that contain ``Jones'' in either the @samp{author} or the
@samp{editor} field, or all entries that contain ``Jones'' in the
@samp{author} field, and ``symbiotic hybernation'' in the @samp{keyword}
field, etc. Basically, the filter can consist of an arbitray number of
search criteria combined with the logical operators @command{and, or}
and @command{not}.


@menu
* Simple Selection::            
* Complex Filters::             
* Properties of Virtual Databases::  
@end menu

@node Simple Selection, Complex Filters, Virtual Databases, Virtual Databases
@subsection Simple Selection

Creating a virtual database is simple: press @kbd{&}, and Ebib will ask
you for a field to select on, and for a regular expression to select
with. So if you want to select all entries that contain ``Jones'' in the
@samp{author} field, you press @kbd{&} and type @kbd{author} as the
field and @kbd{Jones} as the regexp to filter on.

Ebib will then create a virtual database containing the entries matching
your selection criterion. A virtual database has the same name as the
database it is based on, prepended with @samp{V:}. It also has a number
like any other database, and you can move back and forth to other
databases with the number or cursor keys.

If you don't want to filter on one specific field but rather want to
select all entries that match a certain regexp in any field, you can
type @kbd{any} as the field to filter on. So specifying @kbd{any} as the
field and @kbd{Jones} as the regexp, the virtual database will select
all entries that have a field that contains ``Jones'' in them.


@node Complex Filters, Properties of Virtual Databases, Simple Selection, Virtual Databases
@subsection Complex Filters

Once you have a virtual database, it remains associated with the
database it was created from. This means that you can refine or extend
the selection (i.e. the filter) that the virtual database is based
on. If, in the current example, you want to include all the entries that
have ``Jones'' in the @samp{editor} field, you have to perform a logical
@command{or} operation: you want to select an entry if it contains
``Jones'' in the @samp{author} field (which you already did) @emph{or}
if it contains ``Jones'' in the @samp{editor} field.@footnote{The first
impulse in a case like this might be to use @command{and} instead of
@command{or}: after all, you want to select all entries that contain
``Jones'' in the @samp{author} field @emph{and} all entries that contain
``Jones'' in the @samp{editor} field. However, the filter that you build
up is used to test each entry @emph{individually} whether it meets the
selection criterion. An entry meets the criterion if it contains
``Jones'' in the @samp{author} field @emph{or} if it contains ``Jones''
in the @samp{editor} field. Therefore, @command{or} is the required
operator in this case. If you would use @command{and}, you would only
get those entries that contain ``Jones'' in both the @samp{author}
@emph{and} @samp{editor} fields.}

To perform a logical @command{or} operation, press the key @kbd{|}. Like
before, you will be asked which field you want to filter on, and which
regexp you want to filter with. Ebib will then update the virtual
database with all entries in the original database that match the
additional criterion.

It is also possible to perform a logical @command{and} on the virtual
database. Use this if you want to select those entries that contain
``Jones'' in the @samp{author} field and e.g. ``symbiotic hybernation''
in the @samp{keyword} field. A logical @command{and} operation is done
with the key @kbd{&}.@footnote{This is the same key that is used to
create a virtual database. In fact, you can also create a virtual
database with @kbd{|}: when used in a normal database, @kbd{&} and
@kbd{|} are equivalent. They are only different in virtual databases.}

Both the @kbd{&} and @kbd{|} commands can be used with the negative
prefix argument @kbd{M--} (or @kbd{C-u -}, which is identical). In this
case, the search criterion is negated. That is, the negative prefix
argument performs a logical @command{not} operation on the search
criterion.

That is, if you want to select all entries from a database that do
@emph{not} contain ``Jones'' in the @samp{author} field, you can do this
by typing @kbd{M-- &} and then filling out the relevant field and
regexp. This prefix argument is available both in real and in virtual
databases.

There is another way of performing a logical @command{not} operation,
which is only available in virtual databases: by pressing the key
@kbd{~}, you invert the current filter. That is, if you have a virtual
database with all the entries containing ``Jones'' in the @samp{author}
or in the @samp{editor} field, and you press @kbd{~}, the selection is
inverted, and now contains all entries that do @emph{not} have ``Jones''
in the @samp{author} or @samp{editor} field.

Although @kbd{~} and the negative prefix argument to @kbd{&} or @kbd{|}
both perform logical @command{not} operations, they are @emph{not}
equivalent: @kbd{~} negates the entire filter built up so far, while the
negative prefix argument only negates the single selection criterion you
enter with it.

If you want to know what the filter for the current virtual database is
exactly, you can type @kbd{V}. This command displays the current filter
in the minibuffer. The filter is specified as a Lisp expression, meaning
that the operators appear before their operands, not in between
them. That is, @samp{x and y} is written as @command{(and x y)}.

With a prefix argument (any prefix argument will do), the command
@kbd{V} not only displays the current filter, but also reapplies
it. This can be useful when you've made changes to the source database:
Ebib does not automatically update a virtual database when its source
database is modified.


@node Properties of Virtual Databases,  , Complex Filters, Virtual Databases
@subsection Properties of Virtual Databases

Virtual databases differ from normal databases in several ways. First,
they cannot be modified: you cannot add or delete entries, and you
cannot modify the contents of fields. It is also not possible to import
entries to them or merge another file with them. Furthermore, it is not
possible to export entries to them or from them.

A virtual database cannot be saved in the normal way with @kbd{s}, and
the command @kbd{S} to save all databases ignores virtual
databases. If you want to save a virtual database, you can use the
command @kbd{w}. This command not only saves the virtual database, it
also changes it into a normal database, and detaches it from its
original source database, so that you can modify it without affecting
the source database.

The command @kbd{L} also doesn't work with virtual databases. The reason
for this is that the virtual database is not associated with an actual
@file{.bib} file, so there is no file to create a list of references
from. However, it is possible to use the command @kbd{P} with a virtual
database to create a list of entries. @xref{Printing the Database}, for
details on these two commands.


@node The Multiline Edit Buffer,  , Virtual Databases, Advanced Features
@section The Multiline Edit Buffer

As mentioned several times before, Ebib has a special multiline edit
buffer, which is used to edit field values that contain newlines
(so-called @emph{multiline fields}), and also to edit the contents of
the @command{@@preamble} command. This section discusses the details of
this buffer.

Ebib enters multiline edit mode in one of three cases: when you press
@kbd{P} in the index buffer, to edit the @command{@@preamble}
definition, when you hit @kbd{l} in the entry buffer to edit the current
field as multiline, or when you hit @kbd{e} on the @samp{annote} field,
or on a field whose value already is multiline.

The multiline edit buffer uses a special major mode,
@command{ebib-multiline-edit-mode}, which is derived from
@command{text-mode}. The changes with respect to @command{text-mode} are
minor (see below), which means that any customisations you may have made
to @command{text-mode} will be available in the multiline edit buffer.

The settings that are specific for @command{ebib-multiline-edit-mode}
are the functions assigned to the key sequences @kbd{C-x b}, @kbd{C-x k}
and @kbd{C-x C-s}. These key sequences do not have their usual
functions, but rather are redefined to fit Ebib. Both @kbd{C-x b} and
@kbd{C-x k} can be used to leave the multiline edit buffer. @kbd{C-x b}
will store the text as it is to the database, while @kbd{C-x k} will
leave the multiline edit buffer @emph{without} storing the text, i.e.,
the original value of the field or preamble that you were editing will
be retained. If the text in the buffer was modified, @kbd{C-x k} will
ask you if you really want to abandon your changes.

If you leave the mulitiline edit buffer with @kbd{C-x b} when the buffer
is empty (i.e., you deleted all the text, including the final newline),
and you were editing a field value or the @command{@@preamble}
definition, the field value or preamble will be deleted.@footnote{This
is in fact the @emph{only} way to delete the @command{@@preamble}
definition. Field values on the other hand, can also be deleted by
hitting @kbd{x} or @kbd{d} on them in the entry buffer.}

The third command that is redefined in the multiline edit buffer is
@kbd{C-x C-s}. This command can be used to save the database. Because
Ebib does not do an autosave of the current database, it is advisable to
save the database manually every now and then to prevent data-loss in
case of crashes. It would be annoying to have to leave the multiline
edit buffer every time you want to do this, so @kbd{C-x C-s} has been
redefined to allow you to do this from within the buffer.

Note that if you use any kind of parentheses in the text you type, they
must be balanced, otherwise Ebib and BibTeX may become
confused. Therefore, if you store the text in the multiline edit buffer
(either with @kbd{C-x C-s} or @kbd{C-x b}), Ebib will check if there are
any unbalanced parentheses in the buffer, and warn you if this is the
case.


@node The Ebib Buffers, Customisation, Advanced Features, Top
@chapter The Ebib Buffers

This chapter lists all the key commands that exist in Ebib, with a short
description and the actual command that they call. The latter
information is needed if you want to customise Ebib's key
bindings. (@xref{Modifying Key Bindings}.)

@menu
* The Index Buffer::            
* The Entry Buffer::            
* The Strings Buffer::          
@end menu


@node The Index Buffer, The Entry Buffer, The Ebib Buffers, The Ebib Buffers
@section The Index Buffer

@table @asis

@item @kbd{Up}
go to previous entry. @command{(ebib-prev-entry)}

@item @kbd{Down}
go to next entry. @command{(ebib-next-entry)}

@item @kbd{Right}
move to the next database. @command{(ebib-next-database)}
  
@item @kbd{Left}
move to the previous database. @command{(ebib-prev-database)}

@item @kbd{PgUp}
scroll the index buffer down. @command{(ebib-index-scroll-down)}

@item @kbd{PgDn}
scroll the index buffer up. @command{(ebib-index-scroll-up)}
  
@item @kbd{Home}
go to first entry. @command{(ebib-goto-first-entry)}

@item @kbd{End}
go to last entry. @command{(ebib-goto-last-entry)}

@item @kbd{Return}
make the entry under the cursor current. Use after e.g. @kbd{C-s}.
@command{(ebib-select-entry)}
  
@item @kbd{Space}
equivalent to @kbd{PgDn}.
  
@item @kbd{1-9}
jump to the corresponding database.

@item @kbd{/}
search the database. @command{(ebib-search)}
  
@item @kbd{&}
Create a virtual database, or perform a logical @command{and} on the
current virtual database. With negative prefix argument: apply a logical
@command{not} to the selectional
criterion. @command{(ebib-virtual-db-and)}

@item @kbd{|}
Create a virtual database, or perform a logical @command{or} on the
current virtual database. With negative prefix argument: apply a logical
@command{not} to the selectional
criterion. @command{(ebib-virtual-db-or)}

@item @kbd{~}
Perform a logical @command{not} on the current virtual
database. @command{(ebib-virtual-db-not)}

@item @kbd{a}
add an entry. @command{(ebib-add-entry)}

@item @kbd{b}
equivalent to @kbd{Pgup}.

@item @kbd{c}
close the database. @command{(ebib-close-database)}
  
@item @kbd{C}
customise Ebib. @command{(ebib-customize)}

@item @kbd{d}
delete the current entry. @command{(ebib-delete-entry)}

@item @kbd{; d}
delete all marked entries.

@item @kbd{e}
edit the current entry. @command{(ebib-edit-entry)}
  
@item @kbd{E}
edit the key of the current entry. @command{(ebib-edit-keyname)}

@item @kbd{f}
display the full filename of the current database in the minibuffer.
@command{(ebib-print-file-name)}

@item @kbd{F}
follow @samp{crossref}. @command{(ebib-follow-crossref)}

@item @kbd{g}
equivalent to @kbd{Home}.

@item @kbd{G}
equivalent to @kbd{End}.

@item @kbd{h}
show help for the index buffer. @command{(ebib-index-help)}

@item @kbd{H}
show/hide hidden fields. @command{(ebib-toggle-hidden)}

@item @kbd{j}
equivalent to @kbd{Down}.

@item @kbd{J}
jump to another database. This accepts a numeric prefix argument, but
will ask you for a database number if there is
none. @command{(ebib-switch-to-database)}

@item @kbd{k}
equivalent to @kbd{Up}.

@item @kbd{L}
create a LaTeX file from the current database that produces a list of
references formatted by BibTeX. @command{(ebib-latex-database)}

@item @kbd{; L}
create a LaTeX file with the marked entries only.

@item @kbd{m}
mark (or unmark) the current entry. @command{(ebib-mark-entry)}

@item @kbd{; m}
unmark all marked entries.

@item @kbd{M}
merge a @file{.bib} file. @command{(ebib-merge-bibtex-file)}
  
@item @kbd{n}
find next occurrence of the search string. @command{(ebib-search-next)}

@item @kbd{C-n}
equivalent to @kbd{Down}.

@item @kbd{M-n}
equivalent to @kbd{PgDn}.
  
@item @kbd{o}
open a @file{.bib} file. @command{(ebib-load-bibtex-file)}
 
@item @kbd{p}
show and edit the @command{@@preamble} definition in the
database. @command{(ebib-edit-preamble)}

@item @kbd{C-p}
equivalent to @kbd{Up}.

@item @kbd{M-p}
equivalent to @kbd{PgUp}.

@item @kbd{P}
create a LaTeX file for printing the database, listing the entire
contents of each entry. @command{(ebib-print-database)}

@item @kbd{; P}
create a LaTeX file with the marked entries.

@item @kbd{q}
quit Ebib. This sets all variables to nil, unloads the database(s) and
quits Ebib. @command{(ebib-quit)}

@item @kbd{s}
save the database. @command{(ebib-save-current-database)}

@item @kbd{S}
save all modified databases. @command{(ebib-save-all-databases)}

@item @kbd{t}
show and edit the @command{@@string} definitions in the
database. @command{(ebib-edit-strings)}

@item @kbd{u}
extract a URL from the @samp{url} field and send it to a browser. With
numeric prefix argument, extract the @emph{n}th url.

@item @kbd{V}
Display the filter of the current virtual database in the
minibuffer. With prefix argument: reapply the
filter. @command{(ebib-print-filter)}

@item @kbd{w}
write the database to a different file. @command{(ebib-write-database)}

@item @kbd{x}
export the current entry to a file, or, when used with numeric prefix
argument, to another database. @command{(ebib-export-entry)}

@item @kbd{; x}
export the marked entries to a file, or, when used with a numeric prefix
argument, to another database.

@item @kbd{C-x b}
equivalent to @kbd{z}.

@item @kbd{C-x k}
equivalent to @kbd{q}.

@item @kbd{X}
export the @command{@@preamble} definition to a file or, when used with
a numeric prefix argument, to another
database. @command{(ebib-export-preamble)}

@item @kbd{z}
lower Ebib. @command{(ebib-lower)}

@end table


@node The Entry Buffer, The Strings Buffer, The Index Buffer, The Ebib Buffers
@section The Entry Buffer

@table @asis

@item @kbd{Up}
go to the previous field. @command{(ebib-prev-field)}

@item @kbd{Down}
go to the next field. @command{(ebib-next-field)}

@item @kbd{PgUp}
go to the previous set of fields. @command{(ebib-goto-prev-set)}

@item @kbd{PgDn}
go to the next set of fields. @command{(ebib-goto-next-set)}
  
@item @kbd{Home}
go to the first field. @command{(ebib-goto-first-field)}
  
@item @kbd{End}
go to the last field. @command{(ebib-goto-last-field)}

@item @kbd{Space}
equivalent to @kbd{PgDn}.

@item @kbd{b}
equivalent to @kbd{PgUp}.

@item @kbd{c}
copy the contents of the current field to the kill
ring. @command{(ebib-copy-field-contents)}

@item @kbd{d}
delete the value of the current field. The deleted contents will
@emph{not} be put in the kill ring, and is therefore irretrievably
lost. @command{(ebib-delete-field-contents)}
  
@item @kbd{e}
edit the current field. @command{(ebib-edit-fields)}

@item @kbd{g}
equivalent to @kbd{Home}.
  
@item @kbd{G}
equivalent to @kbd{End}.

@item @kbd{h}
show help for the entry buffer. @command{(ebib-entry-help)}

@item @kbd{j}
go to the next field. @command{(ebib-next-field)}

@item @kbd{k}
go to the previous field. @command{(ebib-prev-field)}

@item @kbd{l}
edit the current field as
multiline. @command{(ebib-edit-multiline-field)}

@item @kbd{C-n}
equivalent to @kbd{Down}.

@item @kbd{M-n}
equivalent to @kbd{PgDn}.
  
@item @kbd{C-p}
equivalent to @kbd{Up}.

@item @kbd{M-p}
equivalent to @kbd{PgUp}.

@item @kbd{q}
quit editing the current entry and return focus to the index
buffer. @command{(ebib-quit-entry-buffer)}

@item @kbd{r}
toggle a field's ``raw'' status. @command{(ebib-toggle-raw)}
  
@item @kbd{s}
insert an abbreviation from the @command{@@string} definitions in the
database. @command{(ebib-insert-abbreviation)}

@item @kbd{u}
extract a URL from the current field and send it to a browser. With
numeric prefix argument, extract the @emph{n}th url.

@item @kbd{x}
cut the contents of the current field. Like @kbd{c}, @kbd{x} puts the
contents of the current field in the kill
ring. @command{(ebib-cut-field-contents)}

@item @kbd{y}
yank the last element in the kill ring to the current field. Repeated
use of @kbd{y} functions like @kbd{C-y/M-y}. Note that no text will be
yanked if the field already has a
value. @command{(ebib-yank-field-contents)}
  
@end table


@node The Strings Buffer,  , The Entry Buffer, The Ebib Buffers
@section The Strings Buffer

@table @asis

@item @kbd{Up}
go to the previous string. @command{(ebib-prev-string)}

@item @kbd{Down}
go to the next string. @command{(ebib-next-string)}

@item @kbd{PgUp}
go ten strings up. @command{(ebib-strings-page-up)}

@item @kbd{PgDn}
go ten strings down. @command{(ebib-strings-page-down)}

@item @kbd{Home}
go to the first string. @command{(ebib-goto-first-string)}
  
@item @kbd{End}
go to the last string. @command{(ebib-goto-last-string)}

@item @kbd{Space}
equivalent to @kbd{PgDn}.

@item @kbd{a}
add a new @command{@@string} definition. @command{(ebib-add-string)}

@item @kbd{b}
equivalent to @kbd{PgUp}.

@item @kbd{c}
copy the text of the current string to the kill
ring. @command{(ebib-copy-string-contents)}
  
@item @kbd{d}
delete the current @command{@@string} definition from the
database. You will be asked for
confirmation. @command{(ebib-delete-string)}
  
@item @kbd{e}
edit the value of the current string. @command{(ebib-edit-string)}

@item @kbd{g}
equivalent to @kbd{Home}.
  
@item @kbd{G}
equivalent to @kbd{End}.

@item @kbd{h}
show help for the strings buffer. @command{(ebib-strings-help)}

@item @kbd{j}
equivalent to @kbd{Down}.

@item @kbd{k}
equivalent to @kbd{Up}.

@item @kbd{l}
edit the value of the current string as
multiline. @command{(ebib-edit-multiline-string)}

@item @kbd{C-n}
equivalent to @kbd{Down}.

@item @kbd{M-n}
equivalent to @kbd{PgDn}.

@item @kbd{C-p}
equivalent to @kbd{Up}.

@item @kbd{M-p} 
equivalent to @kbd{PgUp}.

@item @kbd{q}
quit the strings buffer and return focus to the index
buffer. @command{(ebib-quit-strings-buffer)}

@item @kbd{x}
export the current @command{@@string} definition to a file or, when used
with a prefix argument, to another
database. @command{(ebib-export-string)}
  
@item @kbd{X}
export all the @command{@@string} definitions to a file or, when used
with a prefix argument, to another
database. @command{(ebib-export-all-strings)}

@end table


@node Customisation,  , The Ebib Buffers, Top
@chapter Customisation

Ebib can be customised through Emacs' standard customisation
interface. The only thing that cannot be customised in this way are the
key bindings. If you wish to customise those, you have to use the file
@file{~/.ebibrc}.


@menu
* The Customisation Buffer::    
* Modifying Key Bindings::      
@end menu


@node The Customisation Buffer, Modifying Key Bindings, Customisation, Customisation
@section The Customisation Buffer

Ebib's customisation group is a subgroup of the @command{Tex}
group. It can be invoked by typing @kbd{M-x customize-group @key{RET}
ebib @key{RET}}, or by pressing @kbd{C} in the index buffer. This
chapter gives a short description of all the options available in the
customisation buffer.

@menu
* Default Type::                
* Preload Bib Files::           
* Additional Fields::           
* Index Window Size::           
* Insertion Strings::           
* Sort Order::                  
* Use Timestamp::               
* Timestamp Format::            
* Standard Url Field::          
* Url Regexp::                  
* Browser Command::             
* Print Preamble::              
* Print Multiline::             
* Latex Preamble::              
* Print Tempfile::              
* Allow Identical Fields::      
* Entry Types::                 
@end menu

@node Default Type, Preload Bib Files, The Customisation Buffer, The Customisation Buffer
@subsection Default Type

The default type is the default entry type given to a new entry. Every
entry in the Ebib database must have a type, because the type defines
which fields are available. When a new entry is created, Ebib gives it
a default type, which can be customised through this option. The
standard value is @samp{article}.


@node Preload Bib Files, Additional Fields, Default Type, The Customisation Buffer
@subsection Preload Bib Files

This option allows you to specify which file(s) Ebib is to load when
it starts up. Specify one file per line, press the @kbd{INS} button to
add more files. You can complete a partial filename with
@kbd{M-@key{TAB}}.

@node Additional Fields, Index Window Size, Preload Bib Files, The Customisation Buffer
@subsection Additional Fields

The additional fields are those fields that are available for all
entry types, and which BibTeX generally ignores. This option allows
you to specify which additional fields you wish to use in your
database. Specify one field per line, press the @kbd{INS} button to
add more fields.

By default, the following additional fields are defined:
@samp{crossref}, @samp{url}, @samp{annote}, @samp{abstract},
@samp{keywords} and @samp{timestamp}.

@node Index Window Size, Insertion Strings, Additional Fields, The Customisation Buffer
@subsection Index Window Size

This option lets you specify the size of the index window at the top of
the Ebib screen. The default value is 10.

@node Insertion Strings, Sort Order, Index Window Size, The Customisation Buffer
@subsection Insertion Strings

With the command @command{ebib-insert-bibtex-key}, you can insert a
BibTeX key into a LaTeX buffer. This options allows you to customise the
string that Ebib inserts in the buffer.

In fact, it is possible to define multiple strings. Each string must be
numbered: this number provides a way to identify the string that you
want to use. You can select the desired string by calling
@command{ebib-insert-bibtex-key} with a numeric prefix argument
corresponding to the string.

Each string must contain a @samp{%s} directive, which is replaced with
the BibTeX key. For example, it is possible to define the following:

@multitable {1: } {citecitecitecite}
@item
@command{0:} @tab @command{@{%s@}}
@item
@command{1:} @tab @command{\cite@{%s@}}
@item
@command{2:} @tab @command{\nocite@{%s@}}
@end multitable

With this, typing @kbd{M-2 M-x ebib-insert-bibtex-key}, followed by a
BibTeX key will insert the command @command{\nocite@{<key>@}} into the
current buffer. The prefix argument also works when you have bound
@command{ebib-insert-bibtex-key} to a key sequence. That is, if you
have bound it to say @kbd{C-c b}, typing @kbd{M-2 C-c b} inserts the
second string.

You can still use @command{ebib-insert-bibtex-key} without prefix
argument if you have specified multiple strings. Ebib will then insert
string number 1. Note that if you define only one custom string, it
still needs to be numbered. Give it number 1, so that you can enter it
without prefix argument.


@node Sort Order, Use Timestamp, Insertion Strings, The Customisation Buffer
@subsection Sort Order

The use of this option is explained above, see @ref{Sorting on
Fields}. To create a sort order, click the @kbd{INS} button to create a
sort level, and then click the @kbd{INS} button under that sort level
to enter a sort field. If you want to add more than one sort field to
the sort level, simply hit @kbd{INS} again.


@node Use Timestamp, Timestamp Format, Sort Order, The Customisation Buffer
@subsection Use Timestamp

If this option is set, Ebib will add a @samp{timestamp} field to every
new entry, recording the date and time it was added to the
database. @xref{Timestamps}.


@node Timestamp Format, Standard Url Field, Use Timestamp, The Customisation Buffer
@subsection Timestamp Format

This option specifies the format string that is used to create the
timestamp. The format string is used by @command{format-time-string} to
create a time representation. The default value is @w{@command{"%a %b %e
%T %Y"}}, which produces a timestamp of the form @w{@command{"Mon Mar 12
01:03:26 2007"}}. See the documentation for @command{format-time-string}
for the forms that the format string can take.


@node Standard Url Field, Url Regexp, Timestamp Format, The Customisation Buffer
@subsection Standard Url Field

This is the field that Ebib searches for URLs if you press @kbd{u} in
the index buffer. Its default value is @samp{url}.


@node Url Regexp, Browser Command, Standard Url Field, The Customisation Buffer
@subsection Url Regexp

This is the regular expression that Ebib uses to search for URLs in a
field. The default value is:

@example
\\url@{\(.*\)@}\|https?://[^ '<>\"\n\t\f\l]+
@end example

With this regular expression, Ebib considers everything that is in a
LaTeX @command{\url@{...@}} command as a URL, and furtermore every
string of text that starts with @samp{http://} or @samp{https://} and
does not contain whitespace or one of the characters @command{' " <} or
@command{>}.


@node Browser Command, Print Preamble, Url Regexp, The Customisation Buffer
@subsection Browser Command

If this option is unset (which is the default), Ebib uses the Emacs
function @command{browse-url} to start a browser. If this function does
not exist, you can set this option. For example, if you use the Firefox
browser, set this option to @samp{firefox}.

For this to work, the browser that you use must be able to handle a URL
on the command line.


@node Print Preamble, Print Multiline, Browser Command, The Customisation Buffer
@subsection Print Preamble

This option specifies the preamble that is to be added to the LaTeX file
Ebib creates for printing the database (i.e., the @kbd{P} command). By
default, the preamble is empty. You can set your own
@command{\usepackage} commands, or anything else you may need.


@node Print Multiline, Latex Preamble, Print Preamble, The Customisation Buffer
@subsection Print Multiline

When this options is set, Ebib includes multiline field values when it
creates a LaTeX file with @kbd{P} (@command{ebib-print-database}). When
unset, multiline values are excluded, which saves space. By default,
this option is unset.


@node Latex Preamble, Print Tempfile, Print Multiline, The Customisation Buffer
@subsection Latex Preamble

This option specifies the preamble to be added to the LaTeX file for
creating a list of references from the database (i.e., the @kbd{L}
command). By default, the line @command{\bibliographystyle@{plain@}} is
put in the preamble, but you may want to specify your own BibTeX
packages and options.


@node Print Tempfile, Allow Identical Fields, Latex Preamble, The Customisation Buffer
@subsection Print Tempfile

This option specifies the name and location of the temporary file Ebib
creates with the commands @command{ebib-print-database} and
@command{ebib-latex-database}. By default, this option has no value,
which means that Ebib will ask for a filename each time either of these
commands is called.


@node Allow Identical Fields, Entry Types, Print Tempfile, The Customisation Buffer
@subsection Allow Identical Fields

If this option is set, Ebib stores the values of multiple occurrences of
a single field within an entry in a single occurrence of that field,
separated by semicolons. By default, this option is unset, because it
slows down the loading of @file{.bib} files. @xref{Multiple Identical
Fields}.


@node Entry Types,  , Allow Identical Fields, The Customisation Buffer
@subsection Entry Types

This option allows you to customise the entry types that Ebib
uses. Each entry type has a name, a set of obligatory fields and a set
of optional fields. You can add, alter or delete single fields in an
entry type, or whole entry types.

If you want to add an entry type, hit the @kbd{INS} key on the top
level and give the new entry a name, then add obligatory and/or
optional fields. It is not necessary that an entry type has both
obligatory and optional fields, you can define an entry that has only
obligatory or only optional fields.


@node Modifying Key Bindings,  , The Customisation Buffer, Customisation
@section Modifying Key Bindings

If you are unhappy about Ebib's standard key bindings, you can change
them to anything you like. To do this, you have to create a file
@file{~/.ebibrc} and write your preferred key bindings in
it.@footnote{Starting with Ebib 1.0, the initialisation file
@file{~/.ebibrc} is deprecated for everything except key
bindings. Although it is in principle possible to customise Ebib by
setting the relevant variables in @file{~/.ebibrc}, you are advised not
to do so. The customisation macros that used to exist,
@command{defentry}, @command{ebib-preload} and
@command{ebib-additional-fields} have been removed.} A key binding
definition is built up as follows:

@example
(ebib-key <buffer> <key> <command>)
@end example

@command{<buffer>} is either @command{index}, @command{entry} or
@command{strings}, for the corresponding buffer. @command{<key>} is a
standard Emacs key description, and @command{<command>} is the Ebib
command to be associated with the key. The commands that can be used
here are listed in @ref{The Ebib Buffers}. Note that it is possible to
bind more than one key to a single function: just add as many
@command{ebib-key} statements as necessary.

As an example, the following binds @kbd{C-s} to @command{ebib-search}
in the index buffer, so that the database can be searched with
@kbd{C-s} as well as with @kbd{/}:

@example
(ebib-key index "\C-s" ebib-search)
@end example

If you want to unbind a key, you can simply leave out
@command{<command>}. So if you want to bind the command
@command{ebib-delete-entry} to @kbd{D} rather than @kbd{d}, you need to
put the following in @file{.ebibrc}:

@example
(ebib-key index "D" ebib-delete-entry)
(ebib-key index "d")
@end example

The first line binds @kbd{D} to the command
@command{ebib-delete-entry}. The second line unbinds @kbd{d}.

If a command can be called with a prefix key (as for example
@command{ebib-delete-entry} can), @command{ebib-key} will automatically
rebind the prefixed version as well. So in the example above, the first
line not only binds @kbd{D}, it also binds @kbd{; D}. Similarly, the
second line not only unbinds @kbd{d}, but also @kbd{; d}.

It is also possible to redefine the prefix key itself. To do this, you
must specify @command{mark-prefix} for
@command{<buffer>}. The value of @command{<command>} is irrelevant here,
so it can be left out:

@example
(ebib-key mark-prefix ":")
@end example

This sets up @kbd{:} as the new prefix key. Doing this automatically
unbinds the existing prefix key.

@bye
